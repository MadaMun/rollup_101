# name: Release Automation

# on:
#   push:
#     branches:
#       - main  # เมื่อ push เข้า main ให้ทำ release อัตโนมัติ

# jobs:
#   release:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20'

#       - name: Install dependencies
#         run: npm install

#       - name: Bump version and create tag
#         run: |
#           git config --global user.name 'github-actions'
#           git config --global user.email 'github-actions@github.com'
#           npm version patch -m "chore(release): bump version to %s"
          
#           git push --follow-tags

#       - name: Create GitHub Release
#         uses: softprops/action-gh-release@v2
#         with:
#           tag_name: ${{ github.ref }}
#           name: "Release ${{ github.ref }}"
#           body: "## What's New\n - Automated release from CI/CD"
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


name: Build and Publish Packages

env:
  NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

on:
  push:
    branches:
      - feature/*
      - hotfix/*
      - bugfix/*

  pull_request:
    types: [closed]
    branches:
      - main
      - dev
      - release/*


jobs:
  build-publish:
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' }} 
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # 1. Install Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install pnpm
        run: npm install -g pnpm@8.6

      - name: Determine new version for main
        id: new_version
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR Title: $PR_TITLE"
          git status
          if echo "$PR_TITLE" | grep -iq "BREAKING CHANGE"; then
            echo "Triggering Major Version Bump"
            npm version major
          elif echo "$PR_TITLE" | grep -iq "feat:"; then
            echo "Triggering Minor Version Bump"
            npm version minor
          elif echo "$PR_TITLE" | grep -iq "fix:"; then
            echo "Triggering Patch Version Bump"
            npm version patch
          else
            echo "No significant changes detected."
            npm version patch
          fi

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git checkout main
          git pull origin main
          git add package.json pnpm-lock.yaml
          git commit --allow-empty -m "[ACTIONS MESSAGE] Update package version"
          git push origin main
        
        
      - name: Install dependencies
        run: pnpm install
      
      # - name: Run ESLint
      #   run: pnpm eslint:check
      
      # - name: Run Dependencies Audit
      #   run: pnpm audit || true
      
      # - name: Build rollup
      #   run: pnpm build-rollup

      - name: Publish to Firmer Packages
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.GIT_TOKEN}}

      
      - name: Checkout and update dev branch
        run: |
          git fetch origin dev
          git checkout dev
          git pull origin dev
          git merge origin/main --no-ff --allow-unrelated-histories || true
          git checkout --theirs .
          git add .
          git commit -m "[ACTIONS MESSAGE] Update package version"
          npm version prerelease --preid=dev
          git push origin dev
        continue-on-error: true
        
  build-versioning-dev:
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'dev' }}
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # 1. Install Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # 2. Install pnpm
      - name: Install pnpm
        run: npm install -g pnpm@8.6

      # 3. Install dependencies
      - name: Install dependencies
        run: pnpm install
        
      # Optional: Run ESLint
      - name: Run ESLint
        run: pnpm eslint:check

      - name: Run Dependencies Audit
        run: pnpm audit || true

      # 4. Build Rollup
      - name: Build rollup
        run: pnpm build-rollup


      - name: Configure Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Bump version
        run: npm version prerelease --preid=dev

      - name: Commit version bump
        run: |
          git add package.json pnpm-lock.yaml
          git commit -m "[ACTIONS MESSAGE] Bump version"
          git push origin main


  build-test:
    if: startsWith(github.ref, 'refs/heads/bugfix/') || startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/hotfix/')
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # 1. Install Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # 2. Install pnpm
      - name: Install pnpm
        run: npm install -g pnpm@8.6

      # 3. Install dependencies
      - name: Install dependencies
        run: pnpm install

      # 4. Build Rollup
      - name: Build rollup
        run: pnpm build-rollup

      - name: Run ESLint
        run: pnpm eslint:check

      - name: Run Dependencies Audit
        run: pnpm audit || true