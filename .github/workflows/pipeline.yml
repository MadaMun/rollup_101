# name: Release Automation

# on:
#   push:
#     branches:
#       - main  # เมื่อ push เข้า main ให้ทำ release อัตโนมัติ

# jobs:
#   release:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20'

#       - name: Install dependencies
#         run: npm install

#       - name: Bump version and create tag
#         run: |
#           git config --global user.name 'github-actions'
#           git config --global user.email 'github-actions@github.com'
#           npm version patch -m "chore(release): bump version to %s"
          
#           git push --follow-tags

#       - name: Create GitHub Release
#         uses: softprops/action-gh-release@v2
#         with:
#           tag_name: ${{ github.ref }}
#           name: "Release ${{ github.ref }}"
#           body: "## What's New\n - Automated release from CI/CD"
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


name: Build and Publish Packages

on:
  push:
    branches:
      - feature/*
      - hotfix/*
      - bugfix/*
  pull_request:
    types: [closed]
    branches:
      - main
      - dev
      - release/*


jobs:
  build-publish:
    if: startsWith(github.ref, 'refs/tags/release/')
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # 1. Install Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # 2. Install pnpm
      - name: Install pnpm
        run: npm install -g pnpm@8.6

      # 3. Install dependencies
      - name: Install dependencies
        run: pnpm install

      - name: Get current version from package.json
        id: get_version
        run: |
          echo "Current version: $(jq -r .version package.json)"
          echo "CURRENT_VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Determine new version for main
        id: new_version
        run: |
          CURRENT_VERSION=${{ env.CURRENT_VERSION }}
          BASE_VERSION=$(echo $CURRENT_VERSION | sed -E 's/-dev\.[0-9]+//')
          NEW_VERSION=$BASE_VERSION

          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"

          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR Title: $PR_TITLE"

          if echo "$PR_TITLE" | grep -iq "BREAKING CHANGE"; then
            echo "Triggering Major Version Bump"
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif echo "$PR_TITLE" | grep -iq "feat:"; then
            echo "Triggering Minor Version Bump"
            MINOR=$((MINOR + 1))
            PATCH=0
          elif echo "$PR_TITLE" | grep -iq "fix:"; then
            echo "Triggering Patch Version Bump"
            PATCH=$((PATCH + 1))
          else
            echo "No significant changes detected."
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          NEW_DEV_VERSION="${MAJOR}.${MINOR}.${PATCH}-dev.0"

          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEW_DEV_VERSION=$NEW_DEV_VERSION" >> $GITHUB_ENV
      
      - name: Update package.json with new version
        run: |
          NEW_VERSION=${{ env.NEW_VERSION }}
          jq ".version = \"$NEW_VERSION\"" package.json > package.json.tmp && mv package.json.tmp package.json
          
      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git checkout main
          git pull origin main
          git add package.json
          git add pnpm-lock.yaml
          git commit -m "[ACTIONS MESSAGE] Update package version"
          git push origin main

      # Optional: Run ESLint
      - name: Run ESLint
        run: pnpm eslint:check
      
      - name: Run Dependencies Audit
        run: pnpm audit || true
      
      # 4. Build Rollup
      - name: Build rollup
        run: pnpm build-rollup

       # 5. Publish to Firmer Packages
      - name: Publish to Firmer Packages
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

      
      - name: Checkout and update dev branch
        run: |
          git fetch origin dev
          git checkout dev
          git merge origin/main --no-ff --allow-unrelated-histories || true

          git checkout --ours package.json
          git add  package.json
          git commit -m "[ACTIONS MESSAGE] Resolved merge conflicts by accepting changes from main"

          NEW_DEV_VERSION=${{ env.NEW_DEV_VERSION }}
          jq ".version = \"$NEW_DEV_VERSION\"" package.json > package.json.tmp && mv package.json.tmp package.json
          git add package.json
          git commit -m "[ACTIONS MESSAGE] Update package version"
          git push origin dev

  build-versioning-dev:
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'dev' }}
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # 1. Install Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # 2. Install pnpm
      - name: Install pnpm
        run: npm install -g pnpm@8.6

      # 3. Install dependencies
      - name: Install dependencies
        run: pnpm install

      # 4. Build Rollup
      - name: Build rollup
        run: pnpm build-rollup

       # Optional: Run ESLint
      - name: Run ESLint
        run: pnpm eslint:check

      - name: Run Dependencies Audit
        run: pnpm audit || true

      - name: Get current version from package.json
        id: get_version
        run: |
          echo "Current version: $(jq -r .version package.json)"
          echo "CURRENT_VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Determine new version for dev
        id: new_version
        run: |
          CURRENT_VERSION=${{ env.CURRENT_VERSION }}
          if [[ "$CURRENT_VERSION" =~ -dev\.[0-9]+$ ]]; then
            BASE_VERSION=$(echo $CURRENT_VERSION | sed -E 's/(.*-dev\.).*/\1/')
            DEV_NUMBER=$(echo $CURRENT_VERSION | sed -E 's/.*-dev\.([0-9]+)/\1/')
            NEW_DEV_NUMBER=$((DEV_NUMBER + 1))
            NEW_VERSION="${BASE_VERSION}${NEW_DEV_NUMBER}"
          else
            BASE_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$NF = $NF + 1; print}')
            NEW_VERSION="${BASE_VERSION}-dev.1"
          fi
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      
      - name: Update package.json with new version
        run: |
          NEW_VERSION=${{ env.NEW_VERSION }}
          jq ".version = \"$NEW_VERSION\"" package.json > package.json.tmp && mv package.json.tmp package.json

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git checkout main
          git pull origin main
          git add package.json
          git add pnpm-lock.yaml
          git commit -m "[ACTIONS MESSAGE] Update package version"
          git push origin main


  build-test:
    if: startsWith(github.ref, 'refs/heads/bugfix/') || startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/hotfix/')
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # 1. Install Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # 2. Install pnpm
      - name: Install pnpm
        run: npm install -g pnpm@8.6

      # 3. Install dependencies
      - name: Install dependencies
        run: pnpm install

      # 4. Build Rollup
      - name: Build rollup
        run: pnpm build-rollup

      # Optional: Run ESLint
      - name: Run ESLint
        run: pnpm eslint:check

      - name: Run Dependencies Audit
        run: pnpm audit || true