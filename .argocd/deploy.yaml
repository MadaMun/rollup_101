name: Build and Publish Packages

on:
  push:
    branches:
      - feature/*
      - hotfix/*
      - bugfix/*
  pull_request:
    types: [closed]
    branches:
      - main
      - "v*.*.*"

jobs:
  build-publish:
    if: ${{ github.event.pull_request.merged == true && startsWith(github.event.pull_request.base.ref, 'main')}}
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      # 1. Install Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # 2. Install pnpm
      - name: Install pnpm
        run: npm install -g pnpm@8.6

      - name: Determine new version for main
        id: new_version
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          if echo "$PR_TITLE" | grep -iq "BREAKING CHANGE"; then
            echo "Triggering Major Version Bump"
            npm version major
          elif echo "$PR_TITLE" | grep -iq "feat:"; then
            echo "Triggering Minor Version Bump"
            npm version minor
          elif echo "$PR_TITLE" | grep -iq "fix:"; then
            echo "Triggering Patch Version Bump"
            npm version patch
          else
            echo "No significant changes detected."
            npm version patch
          fi

      - name: Install dependencies
        run: pnpm install

      # Optional: Run ESLint
      - name: Run ESLint
        run: pnpm eslint:check || ture

      - name: Run Dependencies Audit
        run: pnpm audit || true

      # 4. Build Rollup
      - name: Build rollup
        run: pnpm build-rollup

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git checkout main
          git merge -X theirs
          git add package.json
          git add pnpm-lock.yaml
          git commit --allow-empty -m "[ACTIONS MESSAGE] Update package version"
          git push origin main



  deploy-release:
    needs: update-version  # ต้องรอ update-version เสร็จ
    if: ${{ github.event.pull_request.merged == true && startsWith(github.event.pull_request.base.ref, '\"v*.*.*\"') }}
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install pnpm
        run: npm install -g pnpm@8.6

      - name: Get version from tag
        id: get_version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/}
          echo "Version from tag: $TAG_VERSION"
          echo "NEW_VERSION=$TAG_VERSION" >> $GITHUB_ENV

      - name: Build container image
        run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):${{ env.NEW_VERSION }} .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):${{ env.NEW_VERSION }}

      - name: Update the deployment tag
        run: |
          sed -i 's/fellow-app:.*/fellow-app:${{ env.NEW_VERSION }}/g' .argocd/deployment.yaml
      
      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git checkout main
          git merge -X theirs
          git add .argocd
          git commit --allow-empty -m "[ACTIONS MESSAGE] Update tag"
          git push origin main


      - name: Create and push new tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          echo "PACKAGE_VERSION=$(npm pkg get version | tr -d '\"')" >> $GITHUB_ENV
          git tag ${{ env.PACKAGE_VERSION }}
          git push origin ${{ env.PACKAGE_VERSION }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.PACKAGE_VERSION }}
          name: "Release ${{ env.PACKAGE_VERSION }}"
          body: "## What's New\n - Automated release from CI/CD"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-test:
    if: startsWith(github.ref, 'refs/heads/bugfix/') || startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/hotfix/')
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # 1. Install Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # 2. Install pnpm
      - name: Install pnpm
        run: npm install -g pnpm@8.6

      # 3. Install dependencies
      - name: Install dependencies
        run: pnpm install

      # Optional: Run ESLint
      - name: Run ESLint
        run: pnpm eslint:check

      - name: Run Dependencies Audit
        run: pnpm audit || true

      - name: Build rollup
        run: pnpm build-rollup